@using System.Text
@using Microsoft.Extensions.Options
@using VVibrantDynamicLayout.Client.Configuration
@using VVibrantDynamicLayout.Client.Services

@inject IOptions<LayoutSettings> LayoutSettings
@inject ComponentRegistryService ComponentRegistry

@if (LayoutComponentData != null)
{
    if (LayoutComponentData.Components.Any())
    {
        <div class="@GetContainerClasses()" style="@GetContainerStyle()">
            @foreach (var childComponent in LayoutComponentData.Components)
            {
                <LayoutRenderer LayoutComponentData="childComponent" />
            }
        </div>
    }
    else
    {
        <div class="layout-item" style="@GetItemStyle()">
            @RenderDynamicComponent(LayoutComponentData.Id)
        </div>
    }
}

@code {
    [Parameter, EditorRequired]
    public LayoutComponent LayoutComponentData { get; set; } = default!;

    private string GetContainerClasses() => LayoutComponentData.Type switch
    {
        "row" => "layout-row",
        "column" => "layout-column",
        _ => ""
    };

    private string GetContainerStyle()
    {
        var sb = new StringBuilder();
        sb.Append($"gap: {LayoutSettings.Value.Gutter};");

        if (!string.IsNullOrEmpty(LayoutComponentData.Width))
        {
            sb.Append($" flex-basis: {LayoutComponentData.Width}; flex-grow: 0; flex-shrink: 0;");
        }
        if (!string.IsNullOrEmpty(LayoutComponentData.Alignment))
        {
            sb.Append($" justify-content: {GetFlexAlignment(LayoutComponentData.Alignment)};");
        }
        return sb.ToString();
    }

    private string GetItemStyle()
    {
        var sb = new StringBuilder();
        if (!string.IsNullOrEmpty(LayoutComponentData.Width))
        {
            sb.Append($"flex-basis: {LayoutComponentData.Width};");
        }
        return sb.ToString();
    }

    private string GetFlexAlignment(string alignment) => alignment.ToLower() switch
    {
        "left" => "flex-start",
        "right" => "flex-end",
        "center" => "center",
        _ => "flex-start"
    };

    private RenderFragment RenderDynamicComponent(string componentId) => builder =>
    {
        var componentType = ComponentRegistry.GetComponentType(componentId);
        builder.OpenComponent(0, componentType);
        builder.CloseComponent();
    };
}